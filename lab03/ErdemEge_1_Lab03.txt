CS 224
LAB 03
Section 01
Erdem Ege EroÄŸlu
21601636

########################################################Program 1 & 2
.data
	pttrn:	.asciiz "enter a pattern to search: "
	input:	.asciiz "enter a input: "
	n:	.asciiz "enter n: "
	new:	.asciiz "\n"
	sum:	.asciiz "Enter a value to make sum: "
	wlcm:	.asciiz	"\nType 1 to run program 1, Type 2 to run program 2, Type 0 to exit: "
	
.text

loop:
	la	$a0, wlcm
	li	$v0, 4
	syscall
	
	li	$v0, 5
	syscall
	move	$t0, $v0
	
	beq	$t0, 1, part1
	beq	$t0, 2, part2
	beq	$t0, 0, partDone
	
	j loop
part1:
	jal	pOne
	j loop
	
part2:
	jal	pTwo
	j 	loop
	
partDone:
	li	$v0, 10
	syscall

pOne:
	la 	$a0, pttrn
	li	$v0, 4
	syscall
	
	li 	$v0, 5
	syscall
	move	$s0, $v0
	
	la 	$a0, input
	li	$v0, 4
	syscall
	
	li 	$v0, 5
	syscall
	move	$s1, $v0
	
	la 	$a0, n
	li	$v0, 4
	syscall
	
	li 	$v0, 5
	syscall
	move	$s2, $v0
	
	move	$a0, $s0
	move	$a1, $s1
	move	$a2, $s2
	jal checkpattern
	
checkpattern:
	li	$s0, 1
	li	$s1, 32
	li	$s5, 0
	move	$s6, $a2
	while:
		beq	$a2, $zero, complete
		sll	$s0, $s0, 1    #  2^n
		subi	$a2, $a2, 1
		j while
	complete:
		div	$s1, $s6
		mflo	$s2 	 # s2 windows
		move $s7, $s0
		
		div 	$a0, $s0
		mfhi	$s3	# pattern
		
	loop2:
		beq	$s2, $zero, done2
		subi	$s2, $s2, 1
		sub	$a1, $a1, $s3    #new a1
		
		div 	$a1, $s7
		mfhi	$s4
	
		sub	$a0, $a0, $s4
		bne	$s4, $0, addLabel
		addi	$s5, $s5, 1
		
		addLabel:
			mul	$s7, $s7, $s0
			j loop2
	
	done2:
	move 	$a0, $s5
	li	$v0, 1
	syscall
	
	j 	loop
pTwo:

	la	$a0, sum
	li	$v0, 4
	syscall
	li 	$v0, 5
	syscall
	move	$a0, $v0
	
	jal	recursiveSummation
	move	$a0,$v0
	li	$v0,1
	syscall

	j loop
	
recursiveSummation:
	subi	$sp, $sp, 8
	sw	$a0, 4($sp)
	sw	$ra, 0($sp)
	
	addi	$t0, $zero, 2
	slt	$t0, $a0, $t0
	beq	$t0, $zero, else
	
	addi	$v0, $zero, 1
	addi	$sp, $sp, 8
	jr	$ra
else:
	addi	$a0, $a0, -1
	jal	recursiveSummation
	lw	$ra, 0($sp)
	lw	$a0, 4($sp)
	addi	$sp, $sp, 8
	add	$v0, $a0, $v0
	
	jr	$ra
		
	j 	loop
	
#################################################### Program 3	

.data
wlcm:				.asciiz	"\nType 1 to run program 1, Type 0 to exit: "
line:				.asciiz "\n --------------------------------------"
nodeNumberLabel:		.asciiz	"\n Node No.: "
addressOfCurrentNodeLabel:	.asciiz	"\n Address of Current Node: "
addressOfNextNodeLabel:		.asciiz	"\n Address of Next Node: "
dataValueOfCurrentNode:		.asciiz	"\n Data Value of Current Node: "
ask:				.asciiz "\n Enter how much value for linkedlist: "
value:				.asciiz "\n Enter value: "

.text
loop:
	la	$a0, wlcm
	li	$v0, 4
	syscall
	
	li	$v0, 5
	syscall
	move	$t0, $v0
	
	beq	$t0, 1, part3
	beq	$t0, 0, partDone
	
	j loop
part3:
	jal pThree
	j loop

partDone:
	li	$v0, 10
	syscall
	
pThree:
	la	$a0, ask
	li	$v0, 4
	syscall
	
	li	$v0, 5
	syscall
	
	move	$a0, $v0
	jal	createLinkedList
	
	move $a0, $v0
	jal	display_Reverse_Order_Recursively

	move	$a0, $v0	# Pass the linked list address in $a0
# Stop. 
	j loop

createLinkedList:
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	move	$s0, $a0	# $s0: no. of nodes to be created.
	li	$s1, 1		# $s1: Node counter

	li	$a0, 8
	li	$v0, 9
	syscall
# OK now we have the list head. Save list head pointer 
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.
	sll	$s4, $s1, 2	
# sll: So that node 1 data value will be 4, node i data value will be 4*i
	la	$a0, value
	li	$v0, 4
	syscall
	
	li	$v0, 5
	syscall
	sw	$v0, 4($s2)	# Store the data value.
addNode:
	beq	$s1, $s0, allDone
	addi	$s1, $s1, 1	# Increment node counter.
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall

	sw	$v0, 0($s2)

	move	$s2, $v0	# $s2 now points to the new node.
	la	$a0, value
	li	$v0, 4
	syscall
	
	li	$v0, 5
	syscall
	move	$t0, $v0
	sw	$v0, 4($s2)	# Store the data value.
	j	addNode
allDone:
	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).

	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	
	jr	$ra

display_Reverse_Order_Recursively:
	addi 	$sp, $sp, -8
	sw	$a0, 4($sp)
	sw	$ra, 0($sp)	
	
	bne $a0, 0, done

	addi	$sp, $sp, 8
	jr $ra
done:
	lw	$a0, 0($a0)

	jal	display_Reverse_Order_Recursively
	lw	$ra, 0($sp)
	lw	$a0, 4($sp)
	move 	$s7, $a0     #s7 current
	la	$a0, line
	li	$v0, 4
	syscall		# Print line seperator
	
	
	la	$a0, addressOfCurrentNodeLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s7	# $s0: Address of current node
	li	$v0, 34
	syscall

	la	$a0, addressOfNextNodeLabel
	li	$v0, 4
	syscall
	lw	$a0, 0($s7)	# $s0: Address of next node
	li	$v0, 34
	syscall	
	
	la	$a0, dataValueOfCurrentNode
	li	$v0, 4
	syscall
		
	lw	$a0, 4($s7)	# $s2: Data of current node
	li	$v0, 1		
	syscall	
	

	addi	$sp, $sp, 8
	jr	$ra
		
################################################################### Program 4



.data
wlcm:				.asciiz	"\nType 1 to run program 1, Type 0 to exit: "
ask:				.asciiz "\n Enter how much value for linkedlist: "
value:				.asciiz "\n Enter value: "
line:				.asciiz "\n --------------------------------------"
nodeNumberLabel:		.asciiz	"\n Node No.: "
addressOfCurrentNodeLabel:	.asciiz	"\n Address of Current Node: "
addressOfNextNodeLabel:		.asciiz	"\n Address of Next Node: "
dataValueOfCurrentNode:		.asciiz	"\n Data Value of Current Node: "

.text
loop:
	la	$a0, wlcm
	li	$v0, 4
	syscall
	
	li	$v0, 5
	syscall
	move	$t0, $v0
	
	beq	$t0, 1, part4
	beq	$t0, 0, partDone
	
	j loop
part4:
	jal pFour
	j loop

partDone:
	li	$v0, 10
	syscall
	
pFour:
	la	$a0, ask
	li	$v0, 4
	syscall
	
	li	$v0, 5
	syscall
	
	move	$a0, $v0
	jal	createLinkedList
	
	move 	$a0, $v0
	jal	duplicateListIterative
	move 	$a0, $v0
	jal 	printLinkedList
	move	$a0, $v0	# Pass the linked list address in $a0
# Stop. 
	j loop

createLinkedList:
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	move	$s0, $a0	# $s0: no. of nodes to be created.
	li	$s1, 1		# $s1: Node counter

	li	$a0, 8
	li	$v0, 9
	syscall
# OK now we have the list head. Save list head pointer 
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.
	sll	$s4, $s1, 2	
# sll: So that node 1 data value will be 4, node i data value will be 4*i
	la	$a0, value
	li	$v0, 4
	syscall
	
	li	$v0, 5
	syscall
	sw	$v0, 4($s2)	# Store the data value.
addNode:
	beq	$s1, $s0, allDone
	addi	$s1, $s1, 1	# Increment node counter.
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall

	sw	$v0, 0($s2)

	move	$s2, $v0	# $s2 now points to the new node.
	la	$a0, value
	li	$v0, 4
	syscall
	
	li	$v0, 5
	syscall
	move	$t0, $v0
	sw	$v0, 4($s2)	# Store the data value.
	j	addNode
allDone:
	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).

	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	
	jr	$ra
#=========================================================
printLinkedList:
	addi	$sp, $sp, -20
	sw	$s0, 16($sp)
	sw	$s1, 12($sp)
	sw	$s2, 8($sp)
	sw	$s3, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

	move $s0, $a0	# $s0: points to the current node.
	li   $s3, 0
printNextNode:
	beq	$s0, $zero, printedAll
				# $s0: Address of current node
	lw	$s1, 0($s0)	# $s1: Address of  next node
	lw	$s2, 4($s0)	# $s2: Data of current node
	addi	$s3, $s3, 1

	la	$a0, line
	li	$v0, 4
	syscall		# Print line seperator
	
	la	$a0, nodeNumberLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s3	# $s0: Node number (position) of current node
	li	$v0, 1
	syscall
	
	la	$a0, addressOfCurrentNodeLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s0	# $s0: Address of current node
	move	$a0, $s0
	li	$v0, 34
	syscall

	la	$a0, addressOfNextNodeLabel
	li	$v0, 4
	syscall
	move	$a0, $s1	# $s0: Address of next node
	li	$v0, 34
	syscall	
	
	la	$a0, dataValueOfCurrentNode
	li	$v0, 4
	syscall
		
	move	$a0, $s2	# $s2: Data of current node
	li	$v0, 1		
	syscall	

	move	$s0, $s1	# Consider next node.
	j	printNextNode
printedAll:
	lw	$ra, 0($sp)
	lw	$s3, 4($sp)
	lw	$s2, 8($sp)
	lw	$s1, 12($sp)
	lw	$s0, 16($sp)
	addi	$sp, $sp, 20
	jr	$ra
	
duplicateListIterative:
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	move	$s0, $a0	# $s0: no. of nodes to be created.
	li	$s1, 1		# $s1: Node counter

	li	$a0, 8
	li	$v0, 9
	syscall
	
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.
	lw	$s4, 4($s0)
	sw	$s4, 4($s2)	# Store the data value.
	lw	$a3, 0($s0)
	move	$s0, $a3
loop2:
	beq	$s0, $zero, done
	
	addi	$s1, $s1, 1	# Increment node counter.
	
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall
	sw	$v0, 0($s2)
	move	$s2, $v0	# $s2 now points to the new node.
	lw	$s4, 4($s0)
	
	sw	$s4, 4($s2)	# Store the data value.
	lw	$a3, 0($s0)
	move	$s0, $a3
	j	loop2
done:
	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	
	jr	$ra
	j 	loop
################################################################### Program 5
.data
wlcm:				.asciiz	"\nType 1 to run program 1, Type 0 to exit: "
ask:				.asciiz "\n Enter how much value for linkedlist: "
value:				.asciiz "\n Enter value: "
line:				.asciiz "\n --------------------------------------"
nodeNumberLabel:		.asciiz	"\n Node No.: "
addressOfCurrentNodeLabel:	.asciiz	"\n Address of Current Node: "
addressOfNextNodeLabel:		.asciiz	"\n Address of Next Node: "
dataValueOfCurrentNode:		.asciiz	"\n Data Value of Current Node: "

.text
loop:
	la	$a0, wlcm
	li	$v0, 4
	syscall
	
	li	$v0, 5
	syscall
	move	$t0, $v0
	
	beq	$t0, 1, part4
	beq	$t0, 0, partDone
	
	j loop
part4:
	jal pFour
	j loop

partDone:
	li	$v0, 10
	syscall
	
pFour:
	la	$a0, ask
	li	$v0, 4
	syscall
	
	li	$v0, 5
	syscall
	
	move	$a0, $v0
	jal	createLinkedList
	
	move 	$a0, $v0
	jal	duplicateListRecursive
	
	move 	$a0, $v0
	jal 	printLinkedList
	
	move	$a0, $v0	# Pass the linked list address in $a0
# Stop. 
	j loop

createLinkedList:
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	move	$s0, $a0	# $s0: no. of nodes to be created.
	li	$s1, 1		# $s1: Node counter

	li	$a0, 8
	li	$v0, 9
	syscall
# OK now we have the list head. Save list head pointer 
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.
	sll	$s4, $s1, 2	
# sll: So that node 1 data value will be 4, node i data value will be 4*i
	la	$a0, value
	li	$v0, 4
	syscall
	
	li	$v0, 5
	syscall
	sw	$v0, 4($s2)	# Store the data value.
addNode:
	beq	$s1, $s0, allDone
	addi	$s1, $s1, 1	# Increment node counter.
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall

	sw	$v0, 0($s2)

	move	$s2, $v0	# $s2 now points to the new node.
	la	$a0, value
	li	$v0, 4
	syscall
	
	li	$v0, 5
	syscall
	move	$t0, $v0
	sw	$v0, 4($s2)	# Store the data value.
	j	addNode
allDone:
	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).

	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	
	jr	$ra
#=========================================================
printLinkedList:
	addi	$sp, $sp, -20
	sw	$s0, 16($sp)
	sw	$s1, 12($sp)
	sw	$s2, 8($sp)
	sw	$s3, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

	move $s0, $a0	# $s0: points to the current node.
	li   $s3, 0
printNextNode:
	beq	$s0, $zero, printedAll
				# $s0: Address of current node
	lw	$s1, 0($s0)	# $s1: Address of  next node
	lw	$s2, 4($s0)	# $s2: Data of current node
	addi	$s3, $s3, 1

	la	$a0, line
	li	$v0, 4
	syscall		# Print line seperator
	
	la	$a0, nodeNumberLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s3	# $s0: Node number (position) of current node
	li	$v0, 1
	syscall
	
	la	$a0, addressOfCurrentNodeLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s0	# $s0: Address of current node
	move	$a0, $s0
	li	$v0, 34
	syscall

	la	$a0, addressOfNextNodeLabel
	li	$v0, 4
	syscall
	move	$a0, $s1	# $s0: Address of next node
	li	$v0, 34
	syscall	
	
	la	$a0, dataValueOfCurrentNode
	li	$v0, 4
	syscall
		
	move	$a0, $s2	# $s2: Data of current node
	li	$v0, 1		
	syscall	

	move	$s0, $s1	# Consider next node.
	j	printNextNode
printedAll:
	lw	$ra, 0($sp)
	lw	$s3, 4($sp)
	lw	$s2, 8($sp)
	lw	$s1, 12($sp)
	lw	$s0, 16($sp)
	addi	$sp, $sp, 20
	jr	$ra
duplicateListRecursive:
	addi     $sp, $sp, -8
    	sw    	$a0, 4($sp)
    	sw    	$ra, 0($sp)

    	bne     $a0, 0, done
    	addi    $sp, $sp, 8

    	li    $a0, 8
    	li    $v0, 9
    	syscall
    	move $s1, $v0

    	sw $zero, 0($s1)
    	lw $a0, 4($sp)
    	lw $ra, 0($sp)
    	lw $s0, 4($a0)
    	sw $s0, 4($s1)
    	move $v0, $s1
    	addi $sp, $sp, 8
    	jr $ra
done:
    	lw    $a0, 0($a0)
    	jal    duplicateListRecursive
    	move $s1, $v0
    	lw $s3, 4($sp)

    	li    $a0, 8
    	li    $v0, 9
    	syscall

    	move $s0, $v0

    	sw $s1, 0($s0)
    	lw $s2, 4($s3)
    	sw $s2, 4($s0)

    	move $v0, $s0
    	lw $ra, 0($sp)

    	addi $sp, $sp, 8
    	jr    $ra
    	
	j 	loop